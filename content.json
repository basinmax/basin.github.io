[{"title":"Dependencies cycle between actuator and spring-data-jpa","date":"2018-11-14T02:12:16.000Z","path":"2018/11/14/ependencies-cycle-between-actuator-and-spring-data-jpa/","text":"APPLICATION FAILED TO START *************************** Description: The dependencies of some of the beans in the application context form a cycle: servletEndpointRegistrar defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/ServletEndpointManagementContextConfiguration.class] ↓ healthEndpoint defined in class path resource [org/springframework/boot/actuate/autoconfigure/health/HealthEndpointConfiguration.class] ↓ org.springframework.boot.actuate.autoconfigure.jdbc.DataSourceHealthIndicatorAutoConfiguration ┌─────┐ | dataSource ↑ ↓ | scopedTarget.dataSource defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class] ↑ ↓ | org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker └─────┘ 在框架下的pom.xml中将spring-boot-starter-parent的版本变更为2.0.2.RELEASE 等待编译maven重新加载后就完美解决了.","tags":[]},{"title":"IONIC&ANGULAR&Cordova","date":"2018-10-20T00:52:57.000Z","path":"2018/10/20/IONIC-ANGULAR/","text":"Ionic &amp; Angular.js&amp;Cordova版本：ionic -v:4.1.1 cordova -v :7.0.1 特定的cordova版本 npm install -g ionic cordova@7.0.1 1.用到ionic的标签可在下面网站查阅https://ionicframework.com/docs/components/ 2.start：跟html类似 同样分为：头部，中部，尾部，分别对应下面的header content footer。 &lt;ion-header&gt;&lt;/ion-header&gt; &lt;ion-content&gt;&lt;/ion-content&gt; &lt;ion-footer&gt;&lt;/ion-footer&gt; 头部： &lt;ion-header no-border&gt; &lt;ion-navbar&gt; &lt;span&gt; &lt;h3&gt;我的简介&lt;/h3&gt; &lt;/span&gt; &lt;/ion-navbar&gt; &lt;/ion-header&gt; 代码如上 则可以生成一个头部 也可根据需求来变更文字显示的位置。 中部： &lt;ion-content&gt; &lt;ion-gird&gt; &lt;ion-row&gt; &lt;ion-col col-12 text-center&gt; &lt;button ion-button color=&quot;danger&quot; (click)=&quot;save()&quot;&gt;保存&lt;/button&gt; &lt;/ion-col&gt; &lt;/ion-row&gt; &lt;/ion-grid&gt; &lt;/ion-content&gt; content中可加入很多内容如list 如图片轮播 如栅栏等。此处不一一列举。可参考1中的链接。 尾部： 现在用到的尾部为","tags":[]},{"title":"Git","date":"2018-09-30T01:40:00.000Z","path":"2018/09/30/it/","text":"Git介绍Git是一个版本控制系统，用来追踪计算机文件的变化的工具，也是一个供多人使用的协同工具。它是一个分布式的版本控制系统，本文将简单介绍如何使用。简单来说，就是你要和你的伙伴一起完成一项任务，但是你们要互相交换修改，查看自己的历史版本等。版本控制系统就是帮助我们做这个的。 网上一堆教程，难得讲得清楚的。这里也不废话介绍原理之类的，直接说明如何使用。由于Git是一个分布式文件控制系统，所以一般采用一个服务器方便大家交换修改用的。每个人本地都有一个版本库，保存自己的历史版本，然后每个人可以把自己的修改提交到服务器上，被人就可以获取你的修改了。因此，Git的版本库（Repository）对于每个人来说有两个，一个是远程的，一个是本地的。这篇博客就是描述怎么从远程服务器克隆版本到本地，以及如何分享本地修改到远程的。 第一步首先打开Git的界面（一般Git都是用命令操作比较多，安装好Git之后，打开git.bash就可以了）之后设置一下全局变量（也就是你访问Git时候的用户名和邮箱了），如果是公开的项目可以省略这一步。 $ git config --global user.name &quot;username&quot; $ git config --global user.email &quot;Git用的邮箱&quot; 第二步进入你想把项目存到本地的位置，比如我想存到本地D盘的test文件夹中，那就使用Git.bash进入到这个文件夹（没有就创建一个），然后执行”git init”初始化这个文件夹（也就是在这个文件夹下创建一个.git文件夹，将一些配置信息放进来） cd d:/test $ git init 第三步找到你想克隆到本地项目的远程仓库地址，例如我想从GitHub上拷贝我的WebTemplate项目到本地，那么就执行git clone命令： 远程库地址如上图 $ git clone https://github.com/****.git 接下来等一会这个项目就会克隆到本地了。查看一下本地就能看到这个项目了。接下来就可以基于这个项目进行开发了。 上面所述就是拉取远程库代码。 然后再通过git pull 指令来更新。 第四步//创建自己的分支 $ git checkout -b 分支名 如果已经有本地的git了现在要更新其他同事分支的代码 可用下面的指令切换到同事的分支 $ git checkout *** //*** 指同事的分支名 如果当前再自己分支已经有过变更代码了 在执行checkout的时候会提示有变更。 提交改完代码后,使用下面的命令 $ git add .//提交全部 $ git add 路径/文件名 提交单个 注意上面的add 后面有 “.” $ git commit - m&quot;备注&quot; 使用commit命令提交到本地git $ git push origin 分支名 将本地git提交到远程git 下面是一些常见的git 命令1.把A分支的代码合并到B分支 一般merge的步骤为 $ git branch //查看当前分支 如果在B上则执行下面的如果在其他分支先checkout回B分支 $ git checkout A //切换到A分支 $ git pull //更新A分支代码 $ git checkout b //切换回B分支 $ git merge A //执行合并 $ git push origin B //如果没有冲突则push到远程分支 解决冲突冲突关键字为：CONFLICT 开头 如果出现冲突必须先解决冲突在执行提交 要使用自己的内容 $ git checkout --ours 文件路径 要使用远程的内容 $ git checkout --theirs 文件路径 以上两种方式不怎么推荐使用 可参照这篇文章进行解决冲突 https://www.cnblogs.com/VergiLyn/p/6701642.html","tags":[{"name":"Git","slug":"Git","permalink":"https://basinmax.github.io/basin.github.io/tags/Git/"}]},{"title":"Hello Hexo","date":"2018-09-29T02:38:00.000Z","path":"2018/09/29/hello-world/","text":"Hexo Hexo的简洁、神秘让我跃跃欲试，在使用过程中遇到了很多问题，整理此文，一是方便其他猿人搭建自己的博客，二是给自己的学习Hexo之旅做个总结。 1.介绍 Hexo是基于NodeJs的静态博客框架，简单、轻量，其生成的静态网页可以托管在Github和Heroku上。 超快速度 支持MarkDown 一键部署 丰富的插件下面以我的博客为例：https://basinmax.github.io/basin.github.io/ 2.环境搭建 2.1 [node] 检测是否成功$ node -v 2.2 安装hexo //Windows $ npm install hexo-cli -g //Mac OS $ sudo npm install hexo-cli -g 2.3上手 创建博客目录 username.github.io @username改成自己的 $ hexo init username.github.io $ cd limedroid.github.io $ npm install 生成静态页面 $ hexo clean $ hexo g $ hexo s 然后打开浏览器，输入地址 localhost:4000 即可看到效果 上面的【g】 即generate/编译 【s】即serve/启动","tags":[{"name":"hexo","slug":"hexo","permalink":"https://basinmax.github.io/basin.github.io/tags/hexo/"}]}]